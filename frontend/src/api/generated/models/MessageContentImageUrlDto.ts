//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * CCCC
 * CodeCentric Company Chat
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ImageUrlDto } from './ImageUrlDto';
import {
    ImageUrlDtoFromJSON,
    ImageUrlDtoFromJSONTyped,
    ImageUrlDtoToJSON,
} from './ImageUrlDto';

/**
 * 
 * @export
 * @interface MessageContentImageUrlDto
 */
export interface MessageContentImageUrlDto {
    /**
     * 
     * @type {ImageUrlDto}
     * @memberof MessageContentImageUrlDto
     */
    image: ImageUrlDto;
    /**
     * 
     * @type {string}
     * @memberof MessageContentImageUrlDto
     */
    type: MessageContentImageUrlDtoTypeEnum;
}


/**
 * @export
 */
export const MessageContentImageUrlDtoTypeEnum = {
    ImageUrl: 'image_url'
} as const;
export type MessageContentImageUrlDtoTypeEnum = typeof MessageContentImageUrlDtoTypeEnum[keyof typeof MessageContentImageUrlDtoTypeEnum];


/**
 * Check if a given object implements the MessageContentImageUrlDto interface.
 */
export function instanceOfMessageContentImageUrlDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "image" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function MessageContentImageUrlDtoFromJSON(json: any): MessageContentImageUrlDto {
    return MessageContentImageUrlDtoFromJSONTyped(json, false);
}

export function MessageContentImageUrlDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): MessageContentImageUrlDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'image': ImageUrlDtoFromJSON(json['image']),
        'type': json['type'],
    };
}

export function MessageContentImageUrlDtoToJSON(value?: MessageContentImageUrlDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'image': ImageUrlDtoToJSON(value.image),
        'type': value.type,
    };
}

