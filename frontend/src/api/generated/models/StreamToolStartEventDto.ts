//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * CCCC
 * CodeCentric Company Chat
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { StreamToolInfoDto } from './StreamToolInfoDto';
import {
    StreamToolInfoDtoFromJSON,
    StreamToolInfoDtoFromJSONTyped,
    StreamToolInfoDtoToJSON,
} from './StreamToolInfoDto';

/**
 * 
 * @export
 * @interface StreamToolStartEventDto
 */
export interface StreamToolStartEventDto {
    /**
     * 
     * @type {StreamToolInfoDto}
     * @memberof StreamToolStartEventDto
     */
    tool: StreamToolInfoDto;
    /**
     * 
     * @type {string}
     * @memberof StreamToolStartEventDto
     */
    type: StreamToolStartEventDtoTypeEnum;
}


/**
 * @export
 */
export const StreamToolStartEventDtoTypeEnum = {
    ToolStart: 'tool_start'
} as const;
export type StreamToolStartEventDtoTypeEnum = typeof StreamToolStartEventDtoTypeEnum[keyof typeof StreamToolStartEventDtoTypeEnum];


/**
 * Check if a given object implements the StreamToolStartEventDto interface.
 */
export function instanceOfStreamToolStartEventDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "tool" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function StreamToolStartEventDtoFromJSON(json: any): StreamToolStartEventDto {
    return StreamToolStartEventDtoFromJSONTyped(json, false);
}

export function StreamToolStartEventDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): StreamToolStartEventDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'tool': StreamToolInfoDtoFromJSON(json['tool']),
        'type': json['type'],
    };
}

export function StreamToolStartEventDtoToJSON(value?: StreamToolStartEventDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'tool': StreamToolInfoDtoToJSON(value.tool),
        'type': value.type,
    };
}

