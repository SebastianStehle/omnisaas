/* eslint-disable */
// @ts-nocheck
//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Omni SaaS
 * SaaS Deployment Tool
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ResourceInstanceLogDto } from './ResourceInstanceLogDto';
import {
    ResourceInstanceLogDtoFromJSON,
    ResourceInstanceLogDtoFromJSONTyped,
    ResourceInstanceLogDtoToJSON,
} from './ResourceInstanceLogDto';

/**
 * 
 * @export
 * @interface ResourceLogsDto
 */
export interface ResourceLogsDto {
    /**
     * The resource I.
     * @type {string}
     * @memberof ResourceLogsDto
     */
    resourceId: string;
    /**
     * The type of the resource.
     * @type {string}
     * @memberof ResourceLogsDto
     */
    resourceType: string;
    /**
     * The name of the resource.
     * @type {string}
     * @memberof ResourceLogsDto
     */
    resourceName: string;
    /**
     * The logs for the instances.
     * @type {Array<ResourceInstanceLogDto>}
     * @memberof ResourceLogsDto
     */
    instances: Array<ResourceInstanceLogDto>;
}

/**
 * Check if a given object implements the ResourceLogsDto interface.
 */
export function instanceOfResourceLogsDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "resourceId" in value;
    isInstance = isInstance && "resourceType" in value;
    isInstance = isInstance && "resourceName" in value;
    isInstance = isInstance && "instances" in value;

    return isInstance;
}

export function ResourceLogsDtoFromJSON(json: any): ResourceLogsDto {
    return ResourceLogsDtoFromJSONTyped(json, false);
}

export function ResourceLogsDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResourceLogsDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'resourceId': json['resourceId'],
        'resourceType': json['resourceType'],
        'resourceName': json['resourceName'],
        'instances': ((json['instances'] as Array<any>).map(ResourceInstanceLogDtoFromJSON)),
    };
}

export function ResourceLogsDtoToJSON(value?: ResourceLogsDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'resourceId': value.resourceId,
        'resourceType': value.resourceType,
        'resourceName': value.resourceName,
        'instances': ((value.instances as Array<any>).map(ResourceInstanceLogDtoToJSON)),
    };
}

