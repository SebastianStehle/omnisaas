/* eslint-disable */
// @ts-nocheck
//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Omni SaaS
 * SaaS Deployment Tool
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ParameterDefinitionDto
 */
export interface ParameterDefinitionDto {
    /**
     * The name of the parameter.
     * @type {string}
     * @memberof ParameterDefinitionDto
     */
    name: string;
    /**
     * The type of the parameter.
     * @type {string}
     * @memberof ParameterDefinitionDto
     */
    type: ParameterDefinitionDtoTypeEnum;
    /**
     * Indicates if the parameter is required.
     * @type {boolean}
     * @memberof ParameterDefinitionDto
     */
    required: boolean;
    /**
     * Gives the parameter a readable name.
     * @type {string}
     * @memberof ParameterDefinitionDto
     */
    label?: string;
    /**
     * Describes the parameter.
     * @type {string}
     * @memberof ParameterDefinitionDto
     */
    hint?: string;
    /**
     * The default value of the parameter.
     * @type {object}
     * @memberof ParameterDefinitionDto
     */
    defaultValue?: object;
    /**
     * Allowed values for the parameter.
     * @type {Array<object>}
     * @memberof ParameterDefinitionDto
     */
    allowedValues?: Array<object>;
    /**
     * Minimum value for numeric parameters.
     * @type {number}
     * @memberof ParameterDefinitionDto
     */
    minValue?: number;
    /**
     * Maximum value for numeric parameters.
     * @type {number}
     * @memberof ParameterDefinitionDto
     */
    maxValue?: number;
    /**
     * Minimum length for string parameters.
     * @type {number}
     * @memberof ParameterDefinitionDto
     */
    minLength?: number;
    /**
     * The step when the control is a slider.
     * @type {number}
     * @memberof ParameterDefinitionDto
     */
    step?: number;
    /**
     * Maximum length for string parameters.
     * @type {number}
     * @memberof ParameterDefinitionDto
     */
    maxLength?: number;
    /**
     * Optional section for grouping.
     * @type {string}
     * @memberof ParameterDefinitionDto
     */
    section?: string;
}


/**
 * @export
 */
export const ParameterDefinitionDtoTypeEnum = {
    String: 'string',
    Number: 'number',
    Boolean: 'boolean'
} as const;
export type ParameterDefinitionDtoTypeEnum = typeof ParameterDefinitionDtoTypeEnum[keyof typeof ParameterDefinitionDtoTypeEnum];


/**
 * Check if a given object implements the ParameterDefinitionDto interface.
 */
export function instanceOfParameterDefinitionDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "required" in value;

    return isInstance;
}

export function ParameterDefinitionDtoFromJSON(json: any): ParameterDefinitionDto {
    return ParameterDefinitionDtoFromJSONTyped(json, false);
}

export function ParameterDefinitionDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ParameterDefinitionDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'type': json['type'],
        'required': json['required'],
        'label': !exists(json, 'label') ? undefined : json['label'],
        'hint': !exists(json, 'hint') ? undefined : json['hint'],
        'defaultValue': !exists(json, 'defaultValue') ? undefined : json['defaultValue'],
        'allowedValues': !exists(json, 'allowedValues') ? undefined : json['allowedValues'],
        'minValue': !exists(json, 'minValue') ? undefined : json['minValue'],
        'maxValue': !exists(json, 'maxValue') ? undefined : json['maxValue'],
        'minLength': !exists(json, 'minLength') ? undefined : json['minLength'],
        'step': !exists(json, 'step') ? undefined : json['step'],
        'maxLength': !exists(json, 'maxLength') ? undefined : json['maxLength'],
        'section': !exists(json, 'section') ? undefined : json['section'],
    };
}

export function ParameterDefinitionDtoToJSON(value?: ParameterDefinitionDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'type': value.type,
        'required': value.required,
        'label': value.label,
        'hint': value.hint,
        'defaultValue': value.defaultValue,
        'allowedValues': value.allowedValues,
        'minValue': value.minValue,
        'maxValue': value.maxValue,
        'minLength': value.minLength,
        'step': value.step,
        'maxLength': value.maxLength,
        'section': value.section,
    };
}

