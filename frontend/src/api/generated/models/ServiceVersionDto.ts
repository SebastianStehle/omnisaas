/* eslint-disable */
// @ts-nocheck
//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Omni SaaS
 * SaaS Deployment Tool
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ServiceVersionDto
 */
export interface ServiceVersionDto {
    /**
     * The ID of the service version.
     * @type {number}
     * @memberof ServiceVersionDto
     */
    id: number;
    /**
     * The name of the version.
     * @type {string}
     * @memberof ServiceVersionDto
     */
    name: string;
    /**
     * The YAML definition.
     * @type {string}
     * @memberof ServiceVersionDto
     */
    definition: string;
    /**
     * The environment settings.
     * @type {{ [key: string]: string; }}
     * @memberof ServiceVersionDto
     */
    environment: { [key: string]: string; };
    /**
     * Indicates if the version is active.
     * @type {boolean}
     * @memberof ServiceVersionDto
     */
    isActive: boolean;
    /**
     * Indicates if the version is the default one.
     * @type {boolean}
     * @memberof ServiceVersionDto
     */
    isDefault: boolean;
    /**
     * The number of deployments.
     * @type {number}
     * @memberof ServiceVersionDto
     */
    numDeployments: number;
}

/**
 * Check if a given object implements the ServiceVersionDto interface.
 */
export function instanceOfServiceVersionDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "definition" in value;
    isInstance = isInstance && "environment" in value;
    isInstance = isInstance && "isActive" in value;
    isInstance = isInstance && "isDefault" in value;
    isInstance = isInstance && "numDeployments" in value;

    return isInstance;
}

export function ServiceVersionDtoFromJSON(json: any): ServiceVersionDto {
    return ServiceVersionDtoFromJSONTyped(json, false);
}

export function ServiceVersionDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ServiceVersionDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'definition': json['definition'],
        'environment': json['environment'],
        'isActive': json['isActive'],
        'isDefault': json['isDefault'],
        'numDeployments': json['numDeployments'],
    };
}

export function ServiceVersionDtoToJSON(value?: ServiceVersionDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'definition': value.definition,
        'environment': value.environment,
        'isActive': value.isActive,
        'isDefault': value.isDefault,
        'numDeployments': value.numDeployments,
    };
}

