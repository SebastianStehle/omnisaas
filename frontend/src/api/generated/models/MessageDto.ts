//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * CCCC
 * CodeCentric Company Chat
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MessageContentDto } from './MessageContentDto';
import {
    MessageContentDtoFromJSON,
    MessageContentDtoFromJSONTyped,
    MessageContentDtoToJSON,
} from './MessageContentDto';

/**
 * 
 * @export
 * @interface MessageDto
 */
export interface MessageDto {
    /**
     * The ID of the message.
     * @type {number}
     * @memberof MessageDto
     */
    id: number;
    /**
     * The content.
     * @type {Array<MessageContentDto>}
     * @memberof MessageDto
     */
    content: Array<MessageContentDto>;
    /**
     * The type.
     * @type {string}
     * @memberof MessageDto
     */
    type: MessageDtoTypeEnum;
    /**
     * The rating.
     * @type {string}
     * @memberof MessageDto
     */
    rating?: MessageDtoRatingEnum;
    /**
     * The executed tools.
     * @type {Array<string>}
     * @memberof MessageDto
     */
    tools?: Array<string>;
    /**
     * The debug records.
     * @type {Array<string>}
     * @memberof MessageDto
     */
    debug?: Array<string>;
}


/**
 * @export
 */
export const MessageDtoTypeEnum = {
    Ai: 'ai',
    Human: 'human'
} as const;
export type MessageDtoTypeEnum = typeof MessageDtoTypeEnum[keyof typeof MessageDtoTypeEnum];

/**
 * @export
 */
export const MessageDtoRatingEnum = {
    Lazy: 'lazy',
    InsufficientStyle: 'insufficient_style',
    Incorrect: 'incorrect',
    InstructionsNotFollowed: 'instructions_not_followed',
    Refused: 'refused',
    Other: 'other'
} as const;
export type MessageDtoRatingEnum = typeof MessageDtoRatingEnum[keyof typeof MessageDtoRatingEnum];


/**
 * Check if a given object implements the MessageDto interface.
 */
export function instanceOfMessageDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "content" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function MessageDtoFromJSON(json: any): MessageDto {
    return MessageDtoFromJSONTyped(json, false);
}

export function MessageDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): MessageDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'content': ((json['content'] as Array<any>).map(MessageContentDtoFromJSON)),
        'type': json['type'],
        'rating': !exists(json, 'rating') ? undefined : json['rating'],
        'tools': !exists(json, 'tools') ? undefined : json['tools'],
        'debug': !exists(json, 'debug') ? undefined : json['debug'],
    };
}

export function MessageDtoToJSON(value?: MessageDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'content': ((value.content as Array<any>).map(MessageContentDtoToJSON)),
        'type': value.type,
        'rating': value.rating,
        'tools': value.tools,
        'debug': value.debug,
    };
}

