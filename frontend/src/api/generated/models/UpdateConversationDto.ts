//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * CCCC
 * CodeCentric Company Chat
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UpdateConversationDto
 */
export interface UpdateConversationDto {
    /**
     * The ID of the deployment.
     * @type {number}
     * @memberof UpdateConversationDto
     */
    deploymentId?: number;
    /**
     * The name of the conversation.
     * @type {string}
     * @memberof UpdateConversationDto
     */
    name?: string;
    /**
     * The context values.
     * @type {object}
     * @memberof UpdateConversationDto
     */
    context?: object;
    /**
     * The optional rating for the whole conversation.
     * @type {string}
     * @memberof UpdateConversationDto
     */
    rating?: UpdateConversationDtoRatingEnum;
}


/**
 * @export
 */
export const UpdateConversationDtoRatingEnum = {
    Good: 'good',
    Bad: 'bad',
    Unrated: 'unrated'
} as const;
export type UpdateConversationDtoRatingEnum = typeof UpdateConversationDtoRatingEnum[keyof typeof UpdateConversationDtoRatingEnum];


/**
 * Check if a given object implements the UpdateConversationDto interface.
 */
export function instanceOfUpdateConversationDto(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function UpdateConversationDtoFromJSON(json: any): UpdateConversationDto {
    return UpdateConversationDtoFromJSONTyped(json, false);
}

export function UpdateConversationDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateConversationDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'deploymentId': !exists(json, 'deploymentId') ? undefined : json['deploymentId'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'context': !exists(json, 'context') ? undefined : json['context'],
        'rating': !exists(json, 'rating') ? undefined : json['rating'],
    };
}

export function UpdateConversationDtoToJSON(value?: UpdateConversationDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'deploymentId': value.deploymentId,
        'name': value.name,
        'context': value.context,
        'rating': value.rating,
    };
}

