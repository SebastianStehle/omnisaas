//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * CCCC
 * CodeCentric Company Chat
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ExtensionArgumentSpecDto
 */
export interface ExtensionArgumentSpecDto {
    /**
     * The type of the argument.
     * @type {string}
     * @memberof ExtensionArgumentSpecDto
     */
    type: ExtensionArgumentSpecDtoTypeEnum;
    /**
     * The label of the argument.
     * @type {string}
     * @memberof ExtensionArgumentSpecDto
     */
    label: string;
    /**
     * True, if required.
     * @type {string}
     * @memberof ExtensionArgumentSpecDto
     */
    description?: string;
    /**
     * True, if required.
     * @type {boolean}
     * @memberof ExtensionArgumentSpecDto
     */
    required?: boolean;
    /**
     * The editor.
     * @type {string}
     * @memberof ExtensionArgumentSpecDto
     */
    editor?: ExtensionArgumentSpecDtoEditorEnum;
    /**
     * The allowed values.
     * @type {Array<string>}
     * @memberof ExtensionArgumentSpecDto
     */
    allowedValues?: Array<string>;
    /**
     * The minimum allowed value for numbers.
     * @type {number}
     * @memberof ExtensionArgumentSpecDto
     */
    min?: number;
    /**
     * The maximum allowed value for numbers.
     * @type {number}
     * @memberof ExtensionArgumentSpecDto
     */
    max?: number;
    /**
     * True to show this property in lists.
     * @type {boolean}
     * @memberof ExtensionArgumentSpecDto
     */
    showInList?: boolean;
    /**
     * Indicates, if the property can be overriden by the user.
     * @type {boolean}
     * @memberof ExtensionArgumentSpecDto
     */
    userValue?: boolean;
    /**
     * URL to the documentation.
     * @type {string}
     * @memberof ExtensionArgumentSpecDto
     */
    documentationUrl?: string;
}


/**
 * @export
 */
export const ExtensionArgumentSpecDtoTypeEnum = {
    String: 'string',
    Number: 'number',
    Boolean: 'boolean'
} as const;
export type ExtensionArgumentSpecDtoTypeEnum = typeof ExtensionArgumentSpecDtoTypeEnum[keyof typeof ExtensionArgumentSpecDtoTypeEnum];

/**
 * @export
 */
export const ExtensionArgumentSpecDtoEditorEnum = {
    Input: 'input',
    Textarea: 'textarea',
    Password: 'password',
    Select: 'select',
    Input2: 'input',
    Slider: 'slider',
    Bucket: 'bucket',
    Toggle: 'toggle'
} as const;
export type ExtensionArgumentSpecDtoEditorEnum = typeof ExtensionArgumentSpecDtoEditorEnum[keyof typeof ExtensionArgumentSpecDtoEditorEnum];


/**
 * Check if a given object implements the ExtensionArgumentSpecDto interface.
 */
export function instanceOfExtensionArgumentSpecDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "label" in value;

    return isInstance;
}

export function ExtensionArgumentSpecDtoFromJSON(json: any): ExtensionArgumentSpecDto {
    return ExtensionArgumentSpecDtoFromJSONTyped(json, false);
}

export function ExtensionArgumentSpecDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExtensionArgumentSpecDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'label': json['label'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'required': !exists(json, 'required') ? undefined : json['required'],
        'editor': !exists(json, 'editor') ? undefined : json['editor'],
        'allowedValues': !exists(json, 'allowedValues') ? undefined : json['allowedValues'],
        'min': !exists(json, 'min') ? undefined : json['min'],
        'max': !exists(json, 'max') ? undefined : json['max'],
        'showInList': !exists(json, 'showInList') ? undefined : json['showInList'],
        'userValue': !exists(json, 'userValue') ? undefined : json['userValue'],
        'documentationUrl': !exists(json, 'documentationUrl') ? undefined : json['documentationUrl'],
    };
}

export function ExtensionArgumentSpecDtoToJSON(value?: ExtensionArgumentSpecDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'label': value.label,
        'description': value.description,
        'required': value.required,
        'editor': value.editor,
        'allowedValues': value.allowedValues,
        'min': value.min,
        'max': value.max,
        'showInList': value.showInList,
        'userValue': value.userValue,
        'documentationUrl': value.documentationUrl,
    };
}

