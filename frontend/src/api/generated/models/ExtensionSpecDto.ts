//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * CCCC
 * CodeCentric Company Chat
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ExtensionArgumentSpecDto } from './ExtensionArgumentSpecDto';
import {
    ExtensionArgumentSpecDtoFromJSON,
    ExtensionArgumentSpecDtoFromJSONTyped,
    ExtensionArgumentSpecDtoToJSON,
} from './ExtensionArgumentSpecDto';

/**
 * 
 * @export
 * @interface ExtensionSpecDto
 */
export interface ExtensionSpecDto {
    /**
     * The name of the extension.
     * @type {string}
     * @memberof ExtensionSpecDto
     */
    name: string;
    /**
     * The display title.
     * @type {string}
     * @memberof ExtensionSpecDto
     */
    title: string;
    /**
     * The optional description.
     * @type {string}
     * @memberof ExtensionSpecDto
     */
    description?: string;
    /**
     * The optional logo as SVG.
     * @type {string}
     * @memberof ExtensionSpecDto
     */
    logo: string;
    /**
     * Indicates if the extension can be tested.
     * @type {boolean}
     * @memberof ExtensionSpecDto
     */
    testable: boolean;
    /**
     * The type of the extension.
     * @type {string}
     * @memberof ExtensionSpecDto
     */
    type: ExtensionSpecDtoTypeEnum;
    /**
     * The arguments.
     * @type {{ [key: string]: ExtensionArgumentSpecDto; }}
     * @memberof ExtensionSpecDto
     */
    arguments: { [key: string]: ExtensionArgumentSpecDto; };
}


/**
 * @export
 */
export const ExtensionSpecDtoTypeEnum = {
    Tool: 'tool',
    Llm: 'llm',
    Other: 'other'
} as const;
export type ExtensionSpecDtoTypeEnum = typeof ExtensionSpecDtoTypeEnum[keyof typeof ExtensionSpecDtoTypeEnum];


/**
 * Check if a given object implements the ExtensionSpecDto interface.
 */
export function instanceOfExtensionSpecDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "logo" in value;
    isInstance = isInstance && "testable" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "arguments" in value;

    return isInstance;
}

export function ExtensionSpecDtoFromJSON(json: any): ExtensionSpecDto {
    return ExtensionSpecDtoFromJSONTyped(json, false);
}

export function ExtensionSpecDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExtensionSpecDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'title': json['title'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'logo': json['logo'],
        'testable': json['testable'],
        'type': json['type'],
        'arguments': (mapValues(json['arguments'], ExtensionArgumentSpecDtoFromJSON)),
    };
}

export function ExtensionSpecDtoToJSON(value?: ExtensionSpecDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'title': value.title,
        'description': value.description,
        'logo': value.logo,
        'testable': value.testable,
        'type': value.type,
        'arguments': (mapValues(value.arguments, ExtensionArgumentSpecDtoToJSON)),
    };
}

