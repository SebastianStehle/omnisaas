/* eslint-disable */
// @ts-nocheck
//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Pangostack
 * SaaS Deployment Tool
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ConnectionInfoDto } from './ConnectionInfoDto';
import {
    ConnectionInfoDtoFromJSON,
    ConnectionInfoDtoFromJSONTyped,
    ConnectionInfoDtoToJSON,
} from './ConnectionInfoDto';
import type { DeploymentResourceDto } from './DeploymentResourceDto';
import {
    DeploymentResourceDtoFromJSON,
    DeploymentResourceDtoFromJSONTyped,
    DeploymentResourceDtoToJSON,
} from './DeploymentResourceDto';

/**
 * 
 * @export
 * @interface DeploymentDto
 */
export interface DeploymentDto {
    /**
     * The ID of the deployment.
     * @type {number}
     * @memberof DeploymentDto
     */
    id: number;
    /**
     * The name of the deployment.
     * @type {string}
     * @memberof DeploymentDto
     */
    name: string | null;
    /**
     * The ID of the service.
     * @type {number}
     * @memberof DeploymentDto
     */
    serviceId: number;
    /**
     * The name of the service.
     * @type {string}
     * @memberof DeploymentDto
     */
    serviceName: string;
    /**
     * The version of the service.
     * @type {string}
     * @memberof DeploymentDto
     */
    serviceVersion: string;
    /**
     * Indicates if the version is the default one.
     * @type {boolean}
     * @memberof DeploymentDto
     */
    isVersionDefault: boolean;
    /**
     *  Indicates if the version is the last one.
     * @type {boolean}
     * @memberof DeploymentDto
     */
    isVersionLast: boolean;
    /**
     * The timestamp when the deployment has been created.
     * @type {Date}
     * @memberof DeploymentDto
     */
    createdAt: Date;
    /**
     * The connection infos organized by connection type and name.
     * @type {{ [key: string]: { [key: string]: ConnectionInfoDto; }; }}
     * @memberof DeploymentDto
     */
    connections: { [key: string]: { [key: string]: ConnectionInfoDto; }; };
    /**
     * Instructions to follow after installation.
     * @type {object}
     * @memberof DeploymentDto
     */
    afterInstallationInstructions: object | null;
    /**
     * The current status of the last deployment update.
     * @type {string}
     * @memberof DeploymentDto
     */
    status: DeploymentDtoStatusEnum;
    /**
     * The current health status of the deployment.
     * @type {string}
     * @memberof DeploymentDto
     */
    healthStatus: DeploymentDtoHealthStatusEnum | null;
    /**
     * The current deployment parameters.
     * @type {{ [key: string]: any; }}
     * @memberof DeploymentDto
     */
    parameters: { [key: string]: any; };
    /**
     * The current resources.
     * @type {Array<DeploymentResourceDto>}
     * @memberof DeploymentDto
     */
    resources: Array<DeploymentResourceDto>;
}


/**
 * @export
 */
export const DeploymentDtoStatusEnum = {
    Pending: 'Pending',
    Running: 'Running',
    Completed: 'Completed',
    Failed: 'Failed'
} as const;
export type DeploymentDtoStatusEnum = typeof DeploymentDtoStatusEnum[keyof typeof DeploymentDtoStatusEnum];

/**
 * @export
 */
export const DeploymentDtoHealthStatusEnum = {
    Succeeded: 'Succeeded',
    Failed: 'Failed'
} as const;
export type DeploymentDtoHealthStatusEnum = typeof DeploymentDtoHealthStatusEnum[keyof typeof DeploymentDtoHealthStatusEnum];


/**
 * Check if a given object implements the DeploymentDto interface.
 */
export function instanceOfDeploymentDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "serviceId" in value;
    isInstance = isInstance && "serviceName" in value;
    isInstance = isInstance && "serviceVersion" in value;
    isInstance = isInstance && "isVersionDefault" in value;
    isInstance = isInstance && "isVersionLast" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "connections" in value;
    isInstance = isInstance && "afterInstallationInstructions" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "healthStatus" in value;
    isInstance = isInstance && "parameters" in value;
    isInstance = isInstance && "resources" in value;

    return isInstance;
}

export function DeploymentDtoFromJSON(json: any): DeploymentDto {
    return DeploymentDtoFromJSONTyped(json, false);
}

export function DeploymentDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): DeploymentDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'serviceId': json['serviceId'],
        'serviceName': json['serviceName'],
        'serviceVersion': json['serviceVersion'],
        'isVersionDefault': json['isVersionDefault'],
        'isVersionLast': json['isVersionLast'],
        'createdAt': (new Date(json['createdAt'])),
        'connections': json['connections'],
        'afterInstallationInstructions': json['afterInstallationInstructions'],
        'status': json['status'],
        'healthStatus': json['healthStatus'],
        'parameters': json['parameters'],
        'resources': ((json['resources'] as Array<any>).map(DeploymentResourceDtoFromJSON)),
    };
}

export function DeploymentDtoToJSON(value?: DeploymentDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'serviceId': value.serviceId,
        'serviceName': value.serviceName,
        'serviceVersion': value.serviceVersion,
        'isVersionDefault': value.isVersionDefault,
        'isVersionLast': value.isVersionLast,
        'createdAt': (value.createdAt.toISOString().substring(0,10)),
        'connections': value.connections,
        'afterInstallationInstructions': value.afterInstallationInstructions,
        'status': value.status,
        'healthStatus': value.healthStatus,
        'parameters': value.parameters,
        'resources': ((value.resources as Array<any>).map(DeploymentResourceDtoToJSON)),
    };
}

