//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * CCCC
 * CodeCentric Company Chat
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ChatSuggestionDto } from './ChatSuggestionDto';
import {
    ChatSuggestionDtoFromJSON,
    ChatSuggestionDtoFromJSONTyped,
    ChatSuggestionDtoToJSON,
} from './ChatSuggestionDto';

/**
 * 
 * @export
 * @interface DeploymentDto
 */
export interface DeploymentDto {
    /**
     * The ID of the deployment.
     * @type {number}
     * @memberof DeploymentDto
     */
    id: number;
    /**
     * The name of the deployment.
     * @type {string}
     * @memberof DeploymentDto
     */
    name: string;
    /**
     * Indicates whether the depoloyment is enabled.
     * @type {boolean}
     * @memberof DeploymentDto
     */
    enabled: boolean;
    /**
     * The name of the agent.
     * @type {string}
     * @memberof DeploymentDto
     */
    agentName?: string;
    /**
     * The footer text to be shown below the chat.
     * @type {string}
     * @memberof DeploymentDto
     */
    chatFooter?: string;
    /**
     * The suggestions to be shown for the chat.
     * @type {Array<ChatSuggestionDto>}
     * @memberof DeploymentDto
     */
    chatSuggestions?: Array<ChatSuggestionDto>;
    /**
     * The optional executor endpoint.
     * @type {string}
     * @memberof DeploymentDto
     */
    executorEndpoint?: string;
    /**
     * The optional executor headers.
     * @type {string}
     * @memberof DeploymentDto
     */
    executorHeaders?: string;
    /**
     * The allowed user groups.
     * @type {Array<string>}
     * @memberof DeploymentDto
     */
    userGroupsIds?: Array<string>;
}

/**
 * Check if a given object implements the DeploymentDto interface.
 */
export function instanceOfDeploymentDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "enabled" in value;

    return isInstance;
}

export function DeploymentDtoFromJSON(json: any): DeploymentDto {
    return DeploymentDtoFromJSONTyped(json, false);
}

export function DeploymentDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): DeploymentDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'enabled': json['enabled'],
        'agentName': !exists(json, 'agentName') ? undefined : json['agentName'],
        'chatFooter': !exists(json, 'chatFooter') ? undefined : json['chatFooter'],
        'chatSuggestions': !exists(json, 'chatSuggestions') ? undefined : ((json['chatSuggestions'] as Array<any>).map(ChatSuggestionDtoFromJSON)),
        'executorEndpoint': !exists(json, 'executorEndpoint') ? undefined : json['executorEndpoint'],
        'executorHeaders': !exists(json, 'executorHeaders') ? undefined : json['executorHeaders'],
        'userGroupsIds': !exists(json, 'userGroupsIds') ? undefined : json['userGroupsIds'],
    };
}

export function DeploymentDtoToJSON(value?: DeploymentDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'enabled': value.enabled,
        'agentName': value.agentName,
        'chatFooter': value.chatFooter,
        'chatSuggestions': value.chatSuggestions === undefined ? undefined : ((value.chatSuggestions as Array<any>).map(ChatSuggestionDtoToJSON)),
        'executorEndpoint': value.executorEndpoint,
        'executorHeaders': value.executorHeaders,
        'userGroupsIds': value.userGroupsIds,
    };
}

