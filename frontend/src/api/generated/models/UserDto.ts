/* eslint-disable */
// @ts-nocheck
//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Omni SaaS
 * SaaS Deployment Tool
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * The user ID from the auth provider.
     * @type {string}
     * @memberof UserDto
     */
    id: string;
    /**
     * The display name.
     * @type {string}
     * @memberof UserDto
     */
    name: string;
    /**
     * The email address.
     * @type {string}
     * @memberof UserDto
     */
    email: string;
    /**
     *  The URL to an external picture.
     * @type {string}
     * @memberof UserDto
     */
    picture: string | null;
    /**
     * The API Key.
     * @type {string}
     * @memberof UserDto
     */
    apiKey: string | null;
    /**
     * The user roles.
     * @type {Array<string>}
     * @memberof UserDto
     */
    roles: Array<string> | null;
    /**
     * The user group ID.
     * @type {string}
     * @memberof UserDto
     */
    userGroupId: string;
    /**
     * Indicates if the user has a password configured.
     * @type {boolean}
     * @memberof UserDto
     */
    hasPassword: boolean;
}

/**
 * Check if a given object implements the UserDto interface.
 */
export function instanceOfUserDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "email" in value;
    isInstance = isInstance && "picture" in value;
    isInstance = isInstance && "apiKey" in value;
    isInstance = isInstance && "roles" in value;
    isInstance = isInstance && "userGroupId" in value;
    isInstance = isInstance && "hasPassword" in value;

    return isInstance;
}

export function UserDtoFromJSON(json: any): UserDto {
    return UserDtoFromJSONTyped(json, false);
}

export function UserDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'email': json['email'],
        'picture': json['picture'],
        'apiKey': json['apiKey'],
        'roles': json['roles'],
        'userGroupId': json['userGroupId'],
        'hasPassword': json['hasPassword'],
    };
}

export function UserDtoToJSON(value?: UserDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'email': value.email,
        'picture': value.picture,
        'apiKey': value.apiKey,
        'roles': value.roles,
        'userGroupId': value.userGroupId,
        'hasPassword': value.hasPassword,
    };
}

