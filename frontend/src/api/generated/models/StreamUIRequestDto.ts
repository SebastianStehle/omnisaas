//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * CCCC
 * CodeCentric Company Chat
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface StreamUIRequestDto
 */
export interface StreamUIRequestDto {
    /**
     * The ID to confirm the request.
     * @type {string}
     * @memberof StreamUIRequestDto
     */
    id: string;
    /**
     * The text for the confirm dialog.
     * @type {string}
     * @memberof StreamUIRequestDto
     */
    text: string;
    /**
     * The type of the request
     * @type {string}
     * @memberof StreamUIRequestDto
     */
    type: StreamUIRequestDtoTypeEnum;
}


/**
 * @export
 */
export const StreamUIRequestDtoTypeEnum = {
    Boolean: 'boolean',
    String: 'string'
} as const;
export type StreamUIRequestDtoTypeEnum = typeof StreamUIRequestDtoTypeEnum[keyof typeof StreamUIRequestDtoTypeEnum];


/**
 * Check if a given object implements the StreamUIRequestDto interface.
 */
export function instanceOfStreamUIRequestDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "text" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function StreamUIRequestDtoFromJSON(json: any): StreamUIRequestDto {
    return StreamUIRequestDtoFromJSONTyped(json, false);
}

export function StreamUIRequestDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): StreamUIRequestDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'text': json['text'],
        'type': json['type'],
    };
}

export function StreamUIRequestDtoToJSON(value?: StreamUIRequestDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'text': value.text,
        'type': value.type,
    };
}

