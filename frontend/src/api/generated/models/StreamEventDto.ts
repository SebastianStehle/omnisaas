//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * CCCC
 * CodeCentric Company Chat
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { StreamCompletedEventDto } from './StreamCompletedEventDto';
import {
    instanceOfStreamCompletedEventDto,
    StreamCompletedEventDtoFromJSON,
    StreamCompletedEventDtoFromJSONTyped,
    StreamCompletedEventDtoToJSON,
} from './StreamCompletedEventDto';
import type { StreamDebugEvent } from './StreamDebugEvent';
import {
    instanceOfStreamDebugEvent,
    StreamDebugEventFromJSON,
    StreamDebugEventFromJSONTyped,
    StreamDebugEventToJSON,
} from './StreamDebugEvent';
import type { StreamErrorEventDto } from './StreamErrorEventDto';
import {
    instanceOfStreamErrorEventDto,
    StreamErrorEventDtoFromJSON,
    StreamErrorEventDtoFromJSONTyped,
    StreamErrorEventDtoToJSON,
} from './StreamErrorEventDto';
import type { StreamMessageSavedDto } from './StreamMessageSavedDto';
import {
    instanceOfStreamMessageSavedDto,
    StreamMessageSavedDtoFromJSON,
    StreamMessageSavedDtoFromJSONTyped,
    StreamMessageSavedDtoToJSON,
} from './StreamMessageSavedDto';
import type { StreamTokenEventDto } from './StreamTokenEventDto';
import {
    instanceOfStreamTokenEventDto,
    StreamTokenEventDtoFromJSON,
    StreamTokenEventDtoFromJSONTyped,
    StreamTokenEventDtoToJSON,
} from './StreamTokenEventDto';
import type { StreamToolEndEventDto } from './StreamToolEndEventDto';
import {
    instanceOfStreamToolEndEventDto,
    StreamToolEndEventDtoFromJSON,
    StreamToolEndEventDtoFromJSONTyped,
    StreamToolEndEventDtoToJSON,
} from './StreamToolEndEventDto';
import type { StreamToolStartEventDto } from './StreamToolStartEventDto';
import {
    instanceOfStreamToolStartEventDto,
    StreamToolStartEventDtoFromJSON,
    StreamToolStartEventDtoFromJSONTyped,
    StreamToolStartEventDtoToJSON,
} from './StreamToolStartEventDto';
import type { StreamUIEventDto } from './StreamUIEventDto';
import {
    instanceOfStreamUIEventDto,
    StreamUIEventDtoFromJSON,
    StreamUIEventDtoFromJSONTyped,
    StreamUIEventDtoToJSON,
} from './StreamUIEventDto';

/**
 * @type StreamEventDto
 * 
 * @export
 */
export type StreamEventDto = { type: 'chunk' } & StreamTokenEventDto | { type: 'completed' } & StreamCompletedEventDto | { type: 'debug' } & StreamDebugEvent | { type: 'error' } & StreamErrorEventDto | { type: 'saved' } & StreamMessageSavedDto | { type: 'tool_end' } & StreamToolEndEventDto | { type: 'tool_start' } & StreamToolStartEventDto | { type: 'ui' } & StreamUIEventDto;

export function StreamEventDtoFromJSON(json: any): StreamEventDto {
    return StreamEventDtoFromJSONTyped(json, false);
}

export function StreamEventDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): StreamEventDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['type']) {
        case 'chunk':
            return {...StreamTokenEventDtoFromJSONTyped(json, true), type: 'chunk'};
        case 'completed':
            return {...StreamCompletedEventDtoFromJSONTyped(json, true), type: 'completed'};
        case 'debug':
            return {...StreamDebugEventFromJSONTyped(json, true), type: 'debug'};
        case 'error':
            return {...StreamErrorEventDtoFromJSONTyped(json, true), type: 'error'};
        case 'saved':
            return {...StreamMessageSavedDtoFromJSONTyped(json, true), type: 'saved'};
        case 'tool_end':
            return {...StreamToolEndEventDtoFromJSONTyped(json, true), type: 'tool_end'};
        case 'tool_start':
            return {...StreamToolStartEventDtoFromJSONTyped(json, true), type: 'tool_start'};
        case 'ui':
            return {...StreamUIEventDtoFromJSONTyped(json, true), type: 'ui'};
        default:
            throw new Error(`No variant of StreamEventDto exists with 'type=${json['type']}'`);
    }
}

export function StreamEventDtoToJSON(value?: StreamEventDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['type']) {
        case 'chunk':
            return StreamTokenEventDtoToJSON(value);
        case 'completed':
            return StreamCompletedEventDtoToJSON(value);
        case 'debug':
            return StreamDebugEventToJSON(value);
        case 'error':
            return StreamErrorEventDtoToJSON(value);
        case 'saved':
            return StreamMessageSavedDtoToJSON(value);
        case 'tool_end':
            return StreamToolEndEventDtoToJSON(value);
        case 'tool_start':
            return StreamToolStartEventDtoToJSON(value);
        case 'ui':
            return StreamUIEventDtoToJSON(value);
        default:
            throw new Error(`No variant of StreamEventDto exists with 'type=${value['type']}'`);
    }

}

