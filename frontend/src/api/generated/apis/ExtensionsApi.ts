//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * CCCC
 * CodeCentric Company Chat
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateExtensionDto,
  DeploymentDto,
  DeploymentsDto,
  ExtensionDto,
  ExtensionsDto,
  TestExtensionDto,
  UpdateExtensionDto,
  UpsertDeploymentDto,
} from '../models/index';
import {
    CreateExtensionDtoFromJSON,
    CreateExtensionDtoToJSON,
    DeploymentDtoFromJSON,
    DeploymentDtoToJSON,
    DeploymentsDtoFromJSON,
    DeploymentsDtoToJSON,
    ExtensionDtoFromJSON,
    ExtensionDtoToJSON,
    ExtensionsDtoFromJSON,
    ExtensionsDtoToJSON,
    TestExtensionDtoFromJSON,
    TestExtensionDtoToJSON,
    UpdateExtensionDtoFromJSON,
    UpdateExtensionDtoToJSON,
    UpsertDeploymentDtoFromJSON,
    UpsertDeploymentDtoToJSON,
} from '../models/index';

export interface DeleteDeploymentRequest {
    id: number;
}

export interface DeleteExtensionRequest {
    id: number;
    extensionId: number;
}

export interface GetDeploymentsRequest {
    enabled?: boolean;
}

export interface GetExtensionsRequest {
    id: number;
}

export interface PostDeploymentRequest {
    upsertDeploymentDto: UpsertDeploymentDto;
}

export interface PostExtensionRequest {
    id: number;
    createExtensionDto: CreateExtensionDto;
}

export interface PutDeploymentRequest {
    id: number;
    upsertDeploymentDto: UpsertDeploymentDto;
}

export interface PutExtensionRequest {
    id: number;
    extensionId: number;
    updateExtensionDto: UpdateExtensionDto;
}

export interface TestExtensionRequest {
    testExtensionDto: TestExtensionDto;
}

/**
 * 
 */
export class ExtensionsApi extends runtime.BaseAPI {

    /**
     * Deletes an deployment.
     * 
     */
    async deleteDeploymentRaw(requestParameters: DeleteDeploymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDeployment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/deployments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an deployment.
     * 
     */
    async deleteDeployment(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDeploymentRaw({ id: id }, initOverrides);
    }

    /**
     * Deletes an extension.
     * 
     */
    async deleteExtensionRaw(requestParameters: DeleteExtensionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteExtension.');
        }

        if (requestParameters.extensionId === null || requestParameters.extensionId === undefined) {
            throw new runtime.RequiredError('extensionId','Required parameter requestParameters.extensionId was null or undefined when calling deleteExtension.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/deployments/{id}/extensions/{extensionId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"extensionId"}}`, encodeURIComponent(String(requestParameters.extensionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an extension.
     * 
     */
    async deleteExtension(id: number, extensionId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteExtensionRaw({ id: id, extensionId: extensionId }, initOverrides);
    }

    /**
     * Gets the configured and available extensions.
     * 
     */
    async getDeploymentsRaw(requestParameters: GetDeploymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeploymentsDto>> {
        const queryParameters: any = {};

        if (requestParameters.enabled !== undefined) {
            queryParameters['enabled'] = requestParameters.enabled;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/deployments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeploymentsDtoFromJSON(jsonValue));
    }

    /**
     * Gets the configured and available extensions.
     * 
     */
    async getDeployments(enabled?: boolean, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeploymentsDto> {
        const response = await this.getDeploymentsRaw({ enabled: enabled }, initOverrides);
        return await response.value();
    }

    /**
     * Gets the configured and available extensions.
     * 
     */
    async getExtensionsRaw(requestParameters: GetExtensionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExtensionsDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getExtensions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/deployments/{id}/extensions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExtensionsDtoFromJSON(jsonValue));
    }

    /**
     * Gets the configured and available extensions.
     * 
     */
    async getExtensions(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExtensionsDto> {
        const response = await this.getExtensionsRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Creates an deployment.
     * 
     */
    async postDeploymentRaw(requestParameters: PostDeploymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeploymentDto>> {
        if (requestParameters.upsertDeploymentDto === null || requestParameters.upsertDeploymentDto === undefined) {
            throw new runtime.RequiredError('upsertDeploymentDto','Required parameter requestParameters.upsertDeploymentDto was null or undefined when calling postDeployment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/deployments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpsertDeploymentDtoToJSON(requestParameters.upsertDeploymentDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeploymentDtoFromJSON(jsonValue));
    }

    /**
     * Creates an deployment.
     * 
     */
    async postDeployment(upsertDeploymentDto: UpsertDeploymentDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeploymentDto> {
        const response = await this.postDeploymentRaw({ upsertDeploymentDto: upsertDeploymentDto }, initOverrides);
        return await response.value();
    }

    /**
     * Creates an extension.
     * 
     */
    async postExtensionRaw(requestParameters: PostExtensionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExtensionDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postExtension.');
        }

        if (requestParameters.createExtensionDto === null || requestParameters.createExtensionDto === undefined) {
            throw new runtime.RequiredError('createExtensionDto','Required parameter requestParameters.createExtensionDto was null or undefined when calling postExtension.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/deployments/{id}/extensions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateExtensionDtoToJSON(requestParameters.createExtensionDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExtensionDtoFromJSON(jsonValue));
    }

    /**
     * Creates an extension.
     * 
     */
    async postExtension(id: number, createExtensionDto: CreateExtensionDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExtensionDto> {
        const response = await this.postExtensionRaw({ id: id, createExtensionDto: createExtensionDto }, initOverrides);
        return await response.value();
    }

    /**
     * Updates an extension.
     * 
     */
    async putDeploymentRaw(requestParameters: PutDeploymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeploymentDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling putDeployment.');
        }

        if (requestParameters.upsertDeploymentDto === null || requestParameters.upsertDeploymentDto === undefined) {
            throw new runtime.RequiredError('upsertDeploymentDto','Required parameter requestParameters.upsertDeploymentDto was null or undefined when calling putDeployment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/deployments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpsertDeploymentDtoToJSON(requestParameters.upsertDeploymentDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeploymentDtoFromJSON(jsonValue));
    }

    /**
     * Updates an extension.
     * 
     */
    async putDeployment(id: number, upsertDeploymentDto: UpsertDeploymentDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeploymentDto> {
        const response = await this.putDeploymentRaw({ id: id, upsertDeploymentDto: upsertDeploymentDto }, initOverrides);
        return await response.value();
    }

    /**
     * Updates an extension.
     * 
     */
    async putExtensionRaw(requestParameters: PutExtensionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExtensionDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling putExtension.');
        }

        if (requestParameters.extensionId === null || requestParameters.extensionId === undefined) {
            throw new runtime.RequiredError('extensionId','Required parameter requestParameters.extensionId was null or undefined when calling putExtension.');
        }

        if (requestParameters.updateExtensionDto === null || requestParameters.updateExtensionDto === undefined) {
            throw new runtime.RequiredError('updateExtensionDto','Required parameter requestParameters.updateExtensionDto was null or undefined when calling putExtension.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/deployments/{id}/extensions/{extensionId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"extensionId"}}`, encodeURIComponent(String(requestParameters.extensionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateExtensionDtoToJSON(requestParameters.updateExtensionDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExtensionDtoFromJSON(jsonValue));
    }

    /**
     * Updates an extension.
     * 
     */
    async putExtension(id: number, extensionId: number, updateExtensionDto: UpdateExtensionDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExtensionDto> {
        const response = await this.putExtensionRaw({ id: id, extensionId: extensionId, updateExtensionDto: updateExtensionDto }, initOverrides);
        return await response.value();
    }

    /**
     * Tests an extension.
     * 
     */
    async testExtensionRaw(requestParameters: TestExtensionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.testExtensionDto === null || requestParameters.testExtensionDto === undefined) {
            throw new runtime.RequiredError('testExtensionDto','Required parameter requestParameters.testExtensionDto was null or undefined when calling testExtension.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/extensions/test`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TestExtensionDtoToJSON(requestParameters.testExtensionDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Tests an extension.
     * 
     */
    async testExtension(testExtensionDto: TestExtensionDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.testExtensionRaw({ testExtensionDto: testExtensionDto }, initOverrides);
    }

}
