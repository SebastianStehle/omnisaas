/* eslint-disable */
// @ts-nocheck
//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Omni SaaS
 * SaaS Deployment Tool
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InvoicesDto,
} from '../models/index';
import {
    InvoicesDtoFromJSON,
    InvoicesDtoToJSON,
} from '../models/index';

export interface GetDeploymentInvoicesRequest {
    teamId: number;
    deploymentId: number;
}

export interface GetInvoicesRequest {
    teamId: number;
}

/**
 * 
 */
export class BillingApi extends runtime.BaseAPI {

    /**
     * Gets all deployment invoices.
     * 
     */
    async getDeploymentInvoicesRaw(requestParameters: GetDeploymentInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvoicesDto>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling getDeploymentInvoices.');
        }

        if (requestParameters.deploymentId === null || requestParameters.deploymentId === undefined) {
            throw new runtime.RequiredError('deploymentId','Required parameter requestParameters.deploymentId was null or undefined when calling getDeploymentInvoices.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/teams/{teamId}/deployments/{deploymentId}/invoices`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters.teamId))).replace(`{${"deploymentId"}}`, encodeURIComponent(String(requestParameters.deploymentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoicesDtoFromJSON(jsonValue));
    }

    /**
     * Gets all deployment invoices.
     * 
     */
    async getDeploymentInvoices(teamId: number, deploymentId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvoicesDto> {
        const response = await this.getDeploymentInvoicesRaw({ teamId: teamId, deploymentId: deploymentId }, initOverrides);
        return await response.value();
    }

    /**
     * Gets all invoices.
     * 
     */
    async getInvoicesRaw(requestParameters: GetInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvoicesDto>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling getInvoices.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/teams/{teamId}/invoices`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoicesDtoFromJSON(jsonValue));
    }

    /**
     * Gets all invoices.
     * 
     */
    async getInvoices(teamId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvoicesDto> {
        const response = await this.getInvoicesRaw({ teamId: teamId }, initOverrides);
        return await response.value();
    }

}
