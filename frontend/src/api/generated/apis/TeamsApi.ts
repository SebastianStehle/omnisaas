/* eslint-disable */
// @ts-nocheck
//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Omni SaaS
 * SaaS Deployment Tool
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TeamDto,
  TeamsDto,
  UpsertTeamDto,
  UpsertTeamUserDto,
} from '../models/index';
import {
    TeamDtoFromJSON,
    TeamDtoToJSON,
    TeamsDtoFromJSON,
    TeamsDtoToJSON,
    UpsertTeamDtoFromJSON,
    UpsertTeamDtoToJSON,
    UpsertTeamUserDtoFromJSON,
    UpsertTeamUserDtoToJSON,
} from '../models/index';

export interface DeleteTeamuserRequest {
    teamId: number;
    userId: string;
}

export interface PostTeamRequest {
    upsertTeamDto: UpsertTeamDto;
}

export interface PostTeamUserRequest {
    teamId: number;
    upsertTeamUserDto: UpsertTeamUserDto;
}

export interface PutTeamRequest {
    teamId: number;
    upsertTeamDto: UpsertTeamDto;
}

/**
 * 
 */
export class TeamsApi extends runtime.BaseAPI {

    /**
     * Removes a team user.
     * 
     */
    async deleteTeamuserRaw(requestParameters: DeleteTeamuserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamDto>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling deleteTeamuser.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling deleteTeamuser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/teams/{teamId}/users/{userId}`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters.teamId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamDtoFromJSON(jsonValue));
    }

    /**
     * Removes a team user.
     * 
     */
    async deleteTeamuser(teamId: number, userId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamDto> {
        const response = await this.deleteTeamuserRaw({ teamId: teamId, userId: userId }, initOverrides);
        return await response.value();
    }

    /**
     * Gets the teams.
     * 
     */
    async getTeamsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamsDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/teams`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamsDtoFromJSON(jsonValue));
    }

    /**
     * Gets the teams.
     * 
     */
    async getTeams(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamsDto> {
        const response = await this.getTeamsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Creates a team.
     * 
     */
    async postTeamRaw(requestParameters: PostTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamDto>> {
        if (requestParameters.upsertTeamDto === null || requestParameters.upsertTeamDto === undefined) {
            throw new runtime.RequiredError('upsertTeamDto','Required parameter requestParameters.upsertTeamDto was null or undefined when calling postTeam.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/teams`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpsertTeamDtoToJSON(requestParameters.upsertTeamDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamDtoFromJSON(jsonValue));
    }

    /**
     * Creates a team.
     * 
     */
    async postTeam(upsertTeamDto: UpsertTeamDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamDto> {
        const response = await this.postTeamRaw({ upsertTeamDto: upsertTeamDto }, initOverrides);
        return await response.value();
    }

    /**
     * Sets a team user.
     * 
     */
    async postTeamUserRaw(requestParameters: PostTeamUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamDto>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling postTeamUser.');
        }

        if (requestParameters.upsertTeamUserDto === null || requestParameters.upsertTeamUserDto === undefined) {
            throw new runtime.RequiredError('upsertTeamUserDto','Required parameter requestParameters.upsertTeamUserDto was null or undefined when calling postTeamUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/teams/{teamId}/users`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpsertTeamUserDtoToJSON(requestParameters.upsertTeamUserDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamDtoFromJSON(jsonValue));
    }

    /**
     * Sets a team user.
     * 
     */
    async postTeamUser(teamId: number, upsertTeamUserDto: UpsertTeamUserDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamDto> {
        const response = await this.postTeamUserRaw({ teamId: teamId, upsertTeamUserDto: upsertTeamUserDto }, initOverrides);
        return await response.value();
    }

    /**
     * Updates a team.
     * 
     */
    async putTeamRaw(requestParameters: PutTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamDto>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling putTeam.');
        }

        if (requestParameters.upsertTeamDto === null || requestParameters.upsertTeamDto === undefined) {
            throw new runtime.RequiredError('upsertTeamDto','Required parameter requestParameters.upsertTeamDto was null or undefined when calling putTeam.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/teams/{teamId}`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpsertTeamDtoToJSON(requestParameters.upsertTeamDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamDtoFromJSON(jsonValue));
    }

    /**
     * Updates a team.
     * 
     */
    async putTeam(teamId: number, upsertTeamDto: UpsertTeamDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamDto> {
        const response = await this.putTeamRaw({ teamId: teamId, upsertTeamDto: upsertTeamDto }, initOverrides);
        return await response.value();
    }

}
