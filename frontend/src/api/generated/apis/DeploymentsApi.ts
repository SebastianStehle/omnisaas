//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Omni SaaS
 * SaaS Deployment Tool
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateDeploymentDto,
  DeploymentDto,
  DeploymentsDto,
} from '../models/index';
import {
    CreateDeploymentDtoFromJSON,
    CreateDeploymentDtoToJSON,
    DeploymentDtoFromJSON,
    DeploymentDtoToJSON,
    DeploymentsDtoFromJSON,
    DeploymentsDtoToJSON,
} from '../models/index';

export interface DeleteDeploymentRequest {
    deploymentId: string;
    teamId: any;
}

export interface GetDeploymentsRequest {
    teamId: string;
}

export interface PostDeploymentRequest {
    teamId: string;
    createDeploymentDto: CreateDeploymentDto;
}

export interface PutDeploymentRequest {
    teamId: string;
    deploymentId: string;
    createDeploymentDto: CreateDeploymentDto;
}

/**
 * 
 */
export class DeploymentsApi extends runtime.BaseAPI {

    /**
     * Delete a deployment.
     * 
     */
    async deleteDeploymentRaw(requestParameters: DeleteDeploymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.deploymentId === null || requestParameters.deploymentId === undefined) {
            throw new runtime.RequiredError('deploymentId','Required parameter requestParameters.deploymentId was null or undefined when calling deleteDeployment.');
        }

        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling deleteDeployment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/teams/{teamId}/deployments/{deploymentId}`.replace(`{${"deploymentId"}}`, encodeURIComponent(String(requestParameters.deploymentId))).replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a deployment.
     * 
     */
    async deleteDeployment(deploymentId: string, teamId: any, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDeploymentRaw({ deploymentId: deploymentId, teamId: teamId }, initOverrides);
    }

    /**
     * Gets all deployments.
     * 
     */
    async getDeploymentsRaw(requestParameters: GetDeploymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeploymentsDto>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling getDeployments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/teams/{teamId}/deployments`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeploymentsDtoFromJSON(jsonValue));
    }

    /**
     * Gets all deployments.
     * 
     */
    async getDeployments(teamId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeploymentsDto> {
        const response = await this.getDeploymentsRaw({ teamId: teamId }, initOverrides);
        return await response.value();
    }

    /**
     * Creates a deployment.
     * 
     */
    async postDeploymentRaw(requestParameters: PostDeploymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeploymentDto>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling postDeployment.');
        }

        if (requestParameters.createDeploymentDto === null || requestParameters.createDeploymentDto === undefined) {
            throw new runtime.RequiredError('createDeploymentDto','Required parameter requestParameters.createDeploymentDto was null or undefined when calling postDeployment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/teams/{teamId}/deployments`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDeploymentDtoToJSON(requestParameters.createDeploymentDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeploymentDtoFromJSON(jsonValue));
    }

    /**
     * Creates a deployment.
     * 
     */
    async postDeployment(teamId: string, createDeploymentDto: CreateDeploymentDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeploymentDto> {
        const response = await this.postDeploymentRaw({ teamId: teamId, createDeploymentDto: createDeploymentDto }, initOverrides);
        return await response.value();
    }

    /**
     * Updates a deployment.
     * 
     */
    async putDeploymentRaw(requestParameters: PutDeploymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeploymentDto>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling putDeployment.');
        }

        if (requestParameters.deploymentId === null || requestParameters.deploymentId === undefined) {
            throw new runtime.RequiredError('deploymentId','Required parameter requestParameters.deploymentId was null or undefined when calling putDeployment.');
        }

        if (requestParameters.createDeploymentDto === null || requestParameters.createDeploymentDto === undefined) {
            throw new runtime.RequiredError('createDeploymentDto','Required parameter requestParameters.createDeploymentDto was null or undefined when calling putDeployment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/teams/{teamId}/deployments/{deploymentId}`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters.teamId))).replace(`{${"deploymentId"}}`, encodeURIComponent(String(requestParameters.deploymentId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDeploymentDtoToJSON(requestParameters.createDeploymentDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeploymentDtoFromJSON(jsonValue));
    }

    /**
     * Updates a deployment.
     * 
     */
    async putDeployment(teamId: string, deploymentId: string, createDeploymentDto: CreateDeploymentDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeploymentDto> {
        const response = await this.putDeploymentRaw({ teamId: teamId, deploymentId: deploymentId, createDeploymentDto: createDeploymentDto }, initOverrides);
        return await response.value();
    }

}
