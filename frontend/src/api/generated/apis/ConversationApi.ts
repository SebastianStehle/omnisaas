//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * CCCC
 * CodeCentric Company Chat
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ConfirmDto,
  ConversationDto,
  ConversationsDto,
  CreateConversationDto,
  MessagesDto,
  RateMessageDto,
  UpdateConversationDto,
} from '../models/index';
import {
    ConfirmDtoFromJSON,
    ConfirmDtoToJSON,
    ConversationDtoFromJSON,
    ConversationDtoToJSON,
    ConversationsDtoFromJSON,
    ConversationsDtoToJSON,
    CreateConversationDtoFromJSON,
    CreateConversationDtoToJSON,
    MessagesDtoFromJSON,
    MessagesDtoToJSON,
    RateMessageDtoFromJSON,
    RateMessageDtoToJSON,
    UpdateConversationDtoFromJSON,
    UpdateConversationDtoToJSON,
} from '../models/index';

export interface ConfirmRequest {
    id: string;
    confirmDto: ConfirmDto;
}

export interface ConversationsControllerPostMessageRequest {
    id: number;
    input: string;
}

export interface DeleteConversationRequest {
    id: number;
}

export interface GetConversationRequest {
    id: number;
}

export interface GetMessagesRequest {
    id: number;
}

export interface PostConversationRequest {
    createConversationDto: CreateConversationDto;
}

export interface PutConversationRequest {
    id: number;
    updateConversationDto: UpdateConversationDto;
}

export interface RateMessageRequest {
    id: number;
    messageId: number;
    rateMessageDto: RateMessageDto;
}

/**
 * 
 */
export class ConversationApi extends runtime.BaseAPI {

    /**
     * 
     */
    async confirmRaw(requestParameters: ConfirmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling confirm.');
        }

        if (requestParameters.confirmDto === null || requestParameters.confirmDto === undefined) {
            throw new runtime.RequiredError('confirmDto','Required parameter requestParameters.confirmDto was null or undefined when calling confirm.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/conversations/confirm/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: ConfirmDtoToJSON(requestParameters.confirmDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     */
    async confirm(id: string, confirmDto: ConfirmDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.confirmRaw({ id: id, confirmDto: confirmDto }, initOverrides);
    }

    /**
     */
    async conversationsControllerPostMessageRaw(requestParameters: ConversationsControllerPostMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling conversationsControllerPostMessage.');
        }

        if (requestParameters.input === null || requestParameters.input === undefined) {
            throw new runtime.RequiredError('input','Required parameter requestParameters.input was null or undefined when calling conversationsControllerPostMessage.');
        }

        const queryParameters: any = {};

        if (requestParameters.input !== undefined) {
            queryParameters['input'] = requestParameters.input;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/conversations/{id}/messages/sse`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async conversationsControllerPostMessage(id: number, input: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.conversationsControllerPostMessageRaw({ id: id, input: input }, initOverrides);
    }

    /**
     * Deletes the conversation.
     * 
     */
    async deleteConversationRaw(requestParameters: DeleteConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteConversation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/conversations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the conversation.
     * 
     */
    async deleteConversation(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteConversationRaw({ id: id }, initOverrides);
    }

    /**
     * Get the conversation by ID.
     * 
     */
    async getConversationRaw(requestParameters: GetConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getConversation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/conversations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationDtoFromJSON(jsonValue));
    }

    /**
     * Get the conversation by ID.
     * 
     */
    async getConversation(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationDto> {
        const response = await this.getConversationRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Gets the list of recent conversations
     * 
     */
    async getConversationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationsDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/conversations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationsDtoFromJSON(jsonValue));
    }

    /**
     * Gets the list of recent conversations
     * 
     */
    async getConversations(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationsDto> {
        const response = await this.getConversationsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Gets the messages of the current conversation.
     * 
     */
    async getMessagesRaw(requestParameters: GetMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessagesDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMessages.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/conversations/{id}/messages`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessagesDtoFromJSON(jsonValue));
    }

    /**
     * Gets the messages of the current conversation.
     * 
     */
    async getMessages(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessagesDto> {
        const response = await this.getMessagesRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Starts the conversation.
     * 
     */
    async postConversationRaw(requestParameters: PostConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationDto>> {
        if (requestParameters.createConversationDto === null || requestParameters.createConversationDto === undefined) {
            throw new runtime.RequiredError('createConversationDto','Required parameter requestParameters.createConversationDto was null or undefined when calling postConversation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/conversations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateConversationDtoToJSON(requestParameters.createConversationDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationDtoFromJSON(jsonValue));
    }

    /**
     * Starts the conversation.
     * 
     */
    async postConversation(createConversationDto: CreateConversationDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationDto> {
        const response = await this.postConversationRaw({ createConversationDto: createConversationDto }, initOverrides);
        return await response.value();
    }

    /**
     * Update the conversation.
     * 
     */
    async putConversationRaw(requestParameters: PutConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling putConversation.');
        }

        if (requestParameters.updateConversationDto === null || requestParameters.updateConversationDto === undefined) {
            throw new runtime.RequiredError('updateConversationDto','Required parameter requestParameters.updateConversationDto was null or undefined when calling putConversation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/conversations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateConversationDtoToJSON(requestParameters.updateConversationDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationDtoFromJSON(jsonValue));
    }

    /**
     * Update the conversation.
     * 
     */
    async putConversation(id: number, updateConversationDto: UpdateConversationDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationDto> {
        const response = await this.putConversationRaw({ id: id, updateConversationDto: updateConversationDto }, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async rateMessageRaw(requestParameters: RateMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling rateMessage.');
        }

        if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
            throw new runtime.RequiredError('messageId','Required parameter requestParameters.messageId was null or undefined when calling rateMessage.');
        }

        if (requestParameters.rateMessageDto === null || requestParameters.rateMessageDto === undefined) {
            throw new runtime.RequiredError('rateMessageDto','Required parameter requestParameters.rateMessageDto was null or undefined when calling rateMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/conversations/{id}/messages/{messageId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"messageId"}}`, encodeURIComponent(String(requestParameters.messageId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RateMessageDtoToJSON(requestParameters.rateMessageDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     */
    async rateMessage(id: number, messageId: number, rateMessageDto: RateMessageDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.rateMessageRaw({ id: id, messageId: messageId, rateMessageDto: rateMessageDto }, initOverrides);
    }

}
