/* tslint:disable */
/* eslint-disable */
/**
 * UberSaas
 * UberSaas Worker
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ResourceApplyRequestDto,
  ResourceApplyResponseDto,
  ResourcesDeleteRequestDto,
  ResourcesTypesDto,
} from '../models/index';
import {
    ResourceApplyRequestDtoFromJSON,
    ResourceApplyRequestDtoToJSON,
    ResourceApplyResponseDtoFromJSON,
    ResourceApplyResponseDtoToJSON,
    ResourcesDeleteRequestDtoFromJSON,
    ResourcesDeleteRequestDtoToJSON,
    ResourcesTypesDtoFromJSON,
    ResourcesTypesDtoToJSON,
} from '../models/index';

export interface DeleteRequest {
    resourcesDeleteRequestDto: ResourcesDeleteRequestDto;
}

export interface ApplyRequest {
    resourceApplyRequestDto: ResourceApplyRequestDto;
}

/**
 * 
 */
export class DeploymentApi extends runtime.BaseAPI {

    /**
     * Deletes all resources with the specified IDs.
     * 
     */
    async _deleteRaw(requestParameters: DeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['resourcesDeleteRequestDto'] == null) {
            throw new runtime.RequiredError(
                'resourcesDeleteRequestDto',
                'Required parameter "resourcesDeleteRequestDto" was null or undefined when calling _delete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/deployment`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: ResourcesDeleteRequestDtoToJSON(requestParameters['resourcesDeleteRequestDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes all resources with the specified IDs.
     * 
     */
    async _delete(resourcesDeleteRequestDto: ResourcesDeleteRequestDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this._deleteRaw({ resourcesDeleteRequestDto: resourcesDeleteRequestDto }, initOverrides);
    }

    /**
     * Applies the resource
     * 
     */
    async applyRaw(requestParameters: ApplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResourceApplyResponseDto>> {
        if (requestParameters['resourceApplyRequestDto'] == null) {
            throw new runtime.RequiredError(
                'resourceApplyRequestDto',
                'Required parameter "resourceApplyRequestDto" was null or undefined when calling apply().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/deployment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResourceApplyRequestDtoToJSON(requestParameters['resourceApplyRequestDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResourceApplyResponseDtoFromJSON(jsonValue));
    }

    /**
     * Applies the resource
     * 
     */
    async apply(resourceApplyRequestDto: ResourceApplyRequestDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResourceApplyResponseDto> {
        const response = await this.applyRaw({ resourceApplyRequestDto: resourceApplyRequestDto }, initOverrides);
        return await response.value();
    }

    /**
     * Gets the available resource types
     * 
     */
    async getTypesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResourcesTypesDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/deployment/types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResourcesTypesDtoFromJSON(jsonValue));
    }

    /**
     * Gets the available resource types
     * 
     */
    async getTypes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResourcesTypesDto> {
        const response = await this.getTypesRaw(initOverrides);
        return await response.value();
    }

}
