/* eslint-disable */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Pangostack
 * Worker
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ResourceValueDto } from './ResourceValueDto';
import {
    ResourceValueDtoFromJSON,
    ResourceValueDtoFromJSONTyped,
    ResourceValueDtoToJSON,
} from './ResourceValueDto';

/**
 * 
 * @export
 * @interface ResourceTypeDto
 */
export interface ResourceTypeDto {
    /**
     * The name of the resource.
     * @type {string}
     * @memberof ResourceTypeDto
     */
    name: string;
    /**
     * The description of the resource.
     * @type {string}
     * @memberof ResourceTypeDto
     */
    description: string;
    /**
     * The parameters.
     * @type {{ [key: string]: ResourceValueDto; }}
     * @memberof ResourceTypeDto
     */
    parameters: { [key: string]: ResourceValueDto; };
    /**
     * The context.
     * @type {{ [key: string]: ResourceValueDto; }}
     * @memberof ResourceTypeDto
     */
    context: { [key: string]: ResourceValueDto; };
}

/**
 * Check if a given object implements the ResourceTypeDto interface.
 */
export function instanceOfResourceTypeDto(value: object): boolean {
    if (!('name' in value)) return false;
    if (!('description' in value)) return false;
    if (!('parameters' in value)) return false;
    if (!('context' in value)) return false;
    return true;
}

export function ResourceTypeDtoFromJSON(json: any): ResourceTypeDto {
    return ResourceTypeDtoFromJSONTyped(json, false);
}

export function ResourceTypeDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResourceTypeDto {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'description': json['description'],
        'parameters': (mapValues(json['parameters'], ResourceValueDtoFromJSON)),
        'context': (mapValues(json['context'], ResourceValueDtoFromJSON)),
    };
}

export function ResourceTypeDtoToJSON(value?: ResourceTypeDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'name': value['name'],
        'description': value['description'],
        'parameters': (mapValues(value['parameters'], ResourceValueDtoToJSON)),
        'context': (mapValues(value['context'], ResourceValueDtoToJSON)),
    };
}

