/* eslint-disable */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Pangostack
 * Worker
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ResourceValueDto
 */
export interface ResourceValueDto {
    /**
     * The type.
     * @type {string}
     * @memberof ResourceValueDto
     */
    type: ResourceValueDtoTypeEnum;
    /**
     * True, if required.
     * @type {boolean}
     * @memberof ResourceValueDto
     */
    required: boolean | null;
    /**
     * The description of the argument.
     * @type {string}
     * @memberof ResourceValueDto
     */
    description: string | null;
    /**
     * The minimum length.
     * @type {number}
     * @memberof ResourceValueDto
     */
    minLength: number | null;
    /**
     * The maximum length.
     * @type {number}
     * @memberof ResourceValueDto
     */
    maxLength: number | null;
    /**
     * The enum values.
     * @type {Array<string>}
     * @memberof ResourceValueDto
     */
    allowedValues: Array<string> | null;
}


/**
 * @export
 */
export const ResourceValueDtoTypeEnum = {
    Boolean: 'boolean',
    Number: 'number',
    String: 'string'
} as const;
export type ResourceValueDtoTypeEnum = typeof ResourceValueDtoTypeEnum[keyof typeof ResourceValueDtoTypeEnum];


/**
 * Check if a given object implements the ResourceValueDto interface.
 */
export function instanceOfResourceValueDto(value: object): boolean {
    if (!('type' in value)) return false;
    if (!('required' in value)) return false;
    if (!('description' in value)) return false;
    if (!('minLength' in value)) return false;
    if (!('maxLength' in value)) return false;
    if (!('allowedValues' in value)) return false;
    return true;
}

export function ResourceValueDtoFromJSON(json: any): ResourceValueDto {
    return ResourceValueDtoFromJSONTyped(json, false);
}

export function ResourceValueDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResourceValueDto {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'required': json['required'],
        'description': json['description'],
        'minLength': json['minLength'],
        'maxLength': json['maxLength'],
        'allowedValues': json['allowedValues'],
    };
}

export function ResourceValueDtoToJSON(value?: ResourceValueDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'type': value['type'],
        'required': value['required'],
        'description': value['description'],
        'minLength': value['minLength'],
        'maxLength': value['maxLength'],
        'allowedValues': value['allowedValues'],
    };
}

