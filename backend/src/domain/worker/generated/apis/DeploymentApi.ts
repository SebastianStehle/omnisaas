/* eslint-disable */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Pangostack
 * Worker
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  ErrorResponseDto,
  ResourceApplyResponseDto,
  ResourceRequestDto,
  ResourcesDeleteRequestDto,
  ResourcesTypesDto,
} from '../models/index';
import {
  ErrorResponseDtoFromJSON,
  ErrorResponseDtoToJSON,
  ResourceApplyResponseDtoFromJSON,
  ResourceApplyResponseDtoToJSON,
  ResourceRequestDtoFromJSON,
  ResourceRequestDtoToJSON,
  ResourcesDeleteRequestDtoFromJSON,
  ResourcesDeleteRequestDtoToJSON,
  ResourcesTypesDtoFromJSON,
  ResourcesTypesDtoToJSON,
} from '../models/index';

export interface ApplyResourceRequest {
  resourceRequestDto: ResourceRequestDto;
}

export interface DeleteResourcesRequest {
  resourcesDeleteRequestDto: ResourcesDeleteRequestDto;
}

/**
 *
 */
export class DeploymentApi extends runtime.BaseAPI {
  /**
   * Applies the resource.
   *
   */
  async applyResourceRaw(
    requestParameters: ApplyResourceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ResourceApplyResponseDto>> {
    if (requestParameters['resourceRequestDto'] == null) {
      throw new runtime.RequiredError(
        'resourceRequestDto',
        'Required parameter "resourceRequestDto" was null or undefined when calling applyResource().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/deployment`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ResourceRequestDtoToJSON(requestParameters['resourceRequestDto']),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ResourceApplyResponseDtoFromJSON(jsonValue));
  }

  /**
   * Applies the resource.
   *
   */
  async applyResource(
    resourceRequestDto: ResourceRequestDto,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ResourceApplyResponseDto> {
    const response = await this.applyResourceRaw({ resourceRequestDto: resourceRequestDto }, initOverrides);
    return await response.value();
  }

  /**
   * Deletes all resources with the specified IDs.
   *
   */
  async deleteResourcesRaw(
    requestParameters: DeleteResourcesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['resourcesDeleteRequestDto'] == null) {
      throw new runtime.RequiredError(
        'resourcesDeleteRequestDto',
        'Required parameter "resourcesDeleteRequestDto" was null or undefined when calling deleteResources().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/deployment`,
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
        body: ResourcesDeleteRequestDtoToJSON(requestParameters['resourcesDeleteRequestDto']),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Deletes all resources with the specified IDs.
   *
   */
  async deleteResources(
    resourcesDeleteRequestDto: ResourcesDeleteRequestDto,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.deleteResourcesRaw({ resourcesDeleteRequestDto: resourcesDeleteRequestDto }, initOverrides);
  }

  /**
   * Gets the available resource types.
   *
   */
  async getTypesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResourcesTypesDto>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/deployment/types`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ResourcesTypesDtoFromJSON(jsonValue));
  }

  /**
   * Gets the available resource types.
   *
   */
  async getTypes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResourcesTypesDto> {
    const response = await this.getTypesRaw(initOverrides);
    return await response.value();
  }
}
