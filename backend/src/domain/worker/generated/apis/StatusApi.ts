/* eslint-disable */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * OmniSaaS
 * Worker
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponseDto,
  LogRequestDto,
  LogResultDto,
  StatusRequestDto,
  StatusResultDto,
  UsageRequestDto,
  UsageResultDto,
} from '../models/index';
import {
    ErrorResponseDtoFromJSON,
    ErrorResponseDtoToJSON,
    LogRequestDtoFromJSON,
    LogRequestDtoToJSON,
    LogResultDtoFromJSON,
    LogResultDtoToJSON,
    StatusRequestDtoFromJSON,
    StatusRequestDtoToJSON,
    StatusResultDtoFromJSON,
    StatusResultDtoToJSON,
    UsageRequestDtoFromJSON,
    UsageRequestDtoToJSON,
    UsageResultDtoFromJSON,
    UsageResultDtoToJSON,
} from '../models/index';

export interface PostLogRequest {
    logRequestDto: LogRequestDto;
}

export interface PostStatusRequest {
    statusRequestDto: StatusRequestDto;
}

export interface PostUsageRequest {
    usageRequestDto: UsageRequestDto;
}

/**
 * 
 */
export class StatusApi extends runtime.BaseAPI {

    /**
     * Gets the logs for all specified deployment IDs.
     * 
     */
    async postLogRaw(requestParameters: PostLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LogResultDto>> {
        if (requestParameters['logRequestDto'] == null) {
            throw new runtime.RequiredError(
                'logRequestDto',
                'Required parameter "logRequestDto" was null or undefined when calling postLog().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/status/log`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LogRequestDtoToJSON(requestParameters['logRequestDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LogResultDtoFromJSON(jsonValue));
    }

    /**
     * Gets the logs for all specified deployment IDs.
     * 
     */
    async postLog(logRequestDto: LogRequestDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LogResultDto> {
        const response = await this.postLogRaw({ logRequestDto: logRequestDto }, initOverrides);
        return await response.value();
    }

    /**
     * Gets the status for all specified deployment IDs.
     * 
     */
    async postStatusRaw(requestParameters: PostStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StatusResultDto>> {
        if (requestParameters['statusRequestDto'] == null) {
            throw new runtime.RequiredError(
                'statusRequestDto',
                'Required parameter "statusRequestDto" was null or undefined when calling postStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/status`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StatusRequestDtoToJSON(requestParameters['statusRequestDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusResultDtoFromJSON(jsonValue));
    }

    /**
     * Gets the status for all specified deployment IDs.
     * 
     */
    async postStatus(statusRequestDto: StatusRequestDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StatusResultDto> {
        const response = await this.postStatusRaw({ statusRequestDto: statusRequestDto }, initOverrides);
        return await response.value();
    }

    /**
     * Gets the usages for all specified deployment IDs.
     * 
     */
    async postUsageRaw(requestParameters: PostUsageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsageResultDto>> {
        if (requestParameters['usageRequestDto'] == null) {
            throw new runtime.RequiredError(
                'usageRequestDto',
                'Required parameter "usageRequestDto" was null or undefined when calling postUsage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/status/usage`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UsageRequestDtoToJSON(requestParameters['usageRequestDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsageResultDtoFromJSON(jsonValue));
    }

    /**
     * Gets the usages for all specified deployment IDs.
     * 
     */
    async postUsage(usageRequestDto: UsageRequestDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsageResultDto> {
        const response = await this.postUsageRaw({ usageRequestDto: usageRequestDto }, initOverrides);
        return await response.value();
    }

}
